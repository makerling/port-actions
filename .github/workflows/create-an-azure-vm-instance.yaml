name: Provision an Azure Instance

on:
  workflow_dispatch:
    inputs:
      vm_name_prefix:
        description: Azure VM name prefix
        required: true
        type: string
      sonarqube_version:
        description: SonarQube Version
        required: true
        default: "9.9.8.100196"
        type: string
      port_context:
        required: true
        description: includes blueprint, run ID, and entity identifier from Port.
jobs:
  provision-azure-vm:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository to the runner
        uses: actions/checkout@v4

      - name: Log starting of Azure VM Instance creation 
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          operation: PATCH_RUN
          runId: ${{ fromJson(inputs.port_context).run_id }}
          logMessage: |
              About to create Azure VM instance 'sonar-server' with SonarQube version ${{ github.event.inputs.sonarqube_version }} .. ⛴️

      - name: Setup Terraform with specified version on the runner
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.10.5

      - name: Run Terraform Plan and Apply (Azure)
        id: plan-azure
        env: 
            ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
            ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
            ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
            ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
            TF_VAR_port_client_id: ${{ secrets.PORT_CLIENT_ID }}
            TF_VAR_port_client_secret: ${{ secrets.PORT_CLIENT_SECRET }}
            TF_VAR_port_run_id: ${{ fromJson(inputs.port_context).run_id }}
            TF_VAR_resource_group_name: ${{ secrets.AZURE_RESOURCE_GROUP }}
            SQ_VM_ADMIN_PASSWORD: ${{ secrets.SQ_VM_ADMIN_PASSWORD }}
        run: |
          cd terraform
          terraform init
          terraform validate
          terraform plan \
            -input=false \
            -out=tfazure-${GITHUB_RUN_NUMBER}.tfplan \
            -var="admin_password=${{ secrets.SQ_VM_ADMIN_PASSWORD }}" \
            -var="sq_version=${{ github.event.inputs.sonarqube_version }}" \
            -var="vm_name_prefix=${{ github.event.inputs.vm_name_prefix }}"

          terraform apply -auto-approve -input=false tfazure-${GITHUB_RUN_NUMBER}.tfplan

      - name: Terraform Port Status
        if: steps.plan-azure.outcome == 'failure'
        run: exit 1

      - name: Run Terraform Plan and Apply (Port)
        id: plan-port
        env: 
            ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
            ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
            ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
            ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
            TF_VAR_port_client_id: ${{ secrets.PORT_CLIENT_ID }}
            TF_VAR_port_client_secret: ${{ secrets.PORT_CLIENT_SECRET }}
            TF_VAR_port_run_id: ${{ fromJson(inputs.port_context).run_id }}
            TF_VAR_resource_group_name: ${{ secrets.AZURE_RESOURCE_GROUP }}
            SQ_VM_ADMIN_PASSWORD: ${{ secrets.SQ_VM_ADMIN_PASSWORD }}
        run: |
          cd terraform
          terraform plan \
            -input=false \
            -out=tfport-${GITHUB_RUN_NUMBER}.tfplan \
            -var="admin_password=${{ secrets.SQ_VM_ADMIN_PASSWORD }}" \
            -var="sq_version=${{ github.event.inputs.sonarqube_version }}" \
            -var="vm_name_prefix=${{ github.event.inputs.vm_name_prefix }}"

          terraform apply -auto-approve -input=false tfport-${GITHUB_RUN_NUMBER}.tfplan

      - name: Terraform Port Status
        if: steps.plan-port.outcome == 'failure'
        run: exit 1

      - name: Create a log message
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          status: "SUCCESS"
          summary: "Created a new Sandbox environment in Azure with associated new network infrastructure"
          runId: ${{ fromJson(inputs.port_context).run_id }}
          logMessage: Successfully created 'sonar-server' VM with SonarQube version ${{ inputs.sonarqube_version }}. [Link](https://portal.azure.com/#@azurefreetrialmsvanderling.onmicrosoft.com/resource/subscriptions/4bf2f5ef-072c-475b-aa17-5accdfbe769f/resourceGroups/SonarQubeSandbox/providers/Microsoft.Compute/virtualMachines/sonar-server)
        